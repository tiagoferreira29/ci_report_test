name: Create Windows Installer
description: Create the Windows Installer with MSIX
inputs:
  build-flavor:
    description: "The build flavor (BelimoAssistant, BelimoAssistantUat, BelimoAssistantPreview, BelimoAssistantUatPreview, BelimoAssistantDev, BelimoAssistantUatDev)"
    required: true
  build-dir:
    description: "Directory where the action should build the installer"
    required: true
  app-release-bin-dir:
    description: "app bin directory"
    required: false
    default: belimo_assistant\build\windows\x64\runner\Release
  agent-release-bin-dir:
    description: "background agent bin directory"
    required: false
    default: background_agent\build\windows\x64\runner\Release
  installer-data-dir:
    description: "data dir of installer"
    required: false
    default: installer_data
  installer-dir:
    description: "installer directory"
    required: false
    default: installer
  dependencies-dir:
    description: "dependencies directory"
    required: false
    default: dependencies
  windows-kit-version:
    description: "version of the windows kit to use"
    required: false
    default: 10.0.17134.0
  version:
    description: "semantic version of the app"
    required: true
  revision:
    description: "revision of installer, is displayed additional to version"
    required: true
outputs:
  path:
    description: "The path to the installer file"
    value: ${{ steps.package.outputs.path }}

runs:
  using: composite

  steps:
    - name: Bundle files into folder
      run: |
        New-Item -ItemType "directory" -Path ${{ inputs.build-dir }}
        Copy-Item -Path "${{ inputs.app-release-bin-dir }}" -Destination "${{ inputs.build-dir }}\belimo_assistant" -Recurse
        Copy-Item -Path "${{ inputs.agent-release-bin-dir }}" -Destination "${{ inputs.build-dir }}\background_agent" -Recurse
        Copy-Item -Path "${{ inputs.dependencies-dir }}\msix\StartingScriptWrapper.ps1" -Destination "${{ inputs.build-dir }}\belimo_assistant"
        Copy-Item -Path "${{ inputs.dependencies-dir }}\msix\package-support-framework\*" -Destination "${{ inputs.build-dir }}"
        Copy-Item -Path "${{ inputs.installer-dir }}\app\src\*" -Destination "${{ inputs.build-dir }}" -Recurse
      shell: pwsh

    - name: Set version
      shell: pwsh
      working-directory: ${{ inputs.installer-dir }}\app
      run: |
        $manifestPath = "${{ inputs.build-dir }}\AppxManifest.xml"
        $imagesPath = "${{ inputs.build-dir }}\Images"
        $templatePath = "template"
        $version = "${{ inputs.version }}.${{inputs.revision }}"

        # $setPackageIdentityScript = "${{ inputs.installer-dir }}\app\set_package_identity.ps1"
        & ./set_package_identity.ps1 -AppManifestPath "$manifestPath" -ImagesPath "$imagesPath" -TemplatePath "$templatePath" -Version $version -BuildFlavor ${{ inputs.build-flavor }}

    - name: Generate resource file
      run: |
        $configXml = "${{ inputs.build-dir }}\resources.xml"
        $outputFile = "${{ inputs.build-dir }}\resources.pri"
        $makepri = Resolve-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\${{ inputs.windows-kit-version }}\x64\makepri.exe"
        $pri_process = Start-Process $makepri -ArgumentList "new /pr `"${{ inputs.build-dir }}`" /cf `"$configXml`" /of `"$outputfile`"" -Wait -NoNewWindow -PassThru

        if ($pri_process.ExitCode -ne 0) {
            throw "Creating file resources.pri failed"
        }

        Write-Host "Resource file created"

      shell: pwsh

    - name: Create msix package
      id: package
      run: |
        $outputFile = "${{ inputs.build-dir }}\Belimo_Assistant_App.msix"
        $makeappx = Resolve-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\${{ inputs.windows-kit-version }}\x64\makeappx.exe"
        $msix_process = Start-Process $makeappx -ArgumentList "pack /o /v /d ${{ inputs.build-dir }} /p `"$outputFile`"" -Wait -NoNewWindow -PassThru

        if ($msix_process.ExitCode -ne 0) {
            throw "Creating msix package failed"
        }

        Write-Host "Msix package created"

        Write-Output "path=$outputFile" >> "$env:GITHUB_OUTPUT"
      shell: pwsh
